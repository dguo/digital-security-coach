#!/usr/bin/env python3
# ./dev --help

import argparse
from http.client import HTTPException
import os
from subprocess import call
import sys
from threading import Thread
import time
from urllib.error import URLError
from urllib.request import urlopen
import webbrowser

parser = argparse.ArgumentParser(prog='./dev')
subparsers = parser.add_subparsers(metavar='<command>', title='commands')

def run(port=False):
    command = ['docker', 'run', '--init', '-it', '--rm', '-v',
              os.getcwd() + ':/src:cached', '-w=/src']
    if port:
        command += ['-p', '127.0.0.1:8080:8080']

    command.append('node:8.8.1')

    return command

def open_in_browser():
    site = 'http://localhost:8080'
    while True:
        try:
            urlopen(site)
            webbrowser.open(site)
            return
        except (URLError, HTTPException):
            time.sleep(1)

def start(args, remaining):
    Thread(target=open_in_browser).start()
    call(run(True) + ['yarn', 'run', 'start'])
parser_start = subparsers.add_parser('start',
    help='start a development environment')
parser_start.set_defaults(func=start)

def ci(args, remaining):
    rc = call(run() + ['yarn', 'ci'])
    exit(rc)
parser_ci = subparsers.add_parser('ci', help='run the CI suite')
parser_ci.set_defaults(func=ci)

def format(args, remaining):
    rc = call(run() + ['yarn', 'run', 'format'])
    exit(rc)
parser_format = subparsers.add_parser('format', help='format the code')
parser_format.set_defaults(func=format)

def lint(args, remaining):
    rc = call(run() + ['yarn', 'run', 'lint'])
    exit(rc)
parser_lint = subparsers.add_parser('lint', help='lint the code')
parser_lint.set_defaults(func=lint)

def test(args, remaining):
    rc = call(run() + ['yarn', 'run', 'test'])
    exit(rc)
parser_test = subparsers.add_parser('test', help='run tests')
parser_test.set_defaults(func=test)

def sh(args, remaining):
    call(run() + ['bash'])
parser_sh = subparsers.add_parser('sh', help='bring up a shell')
parser_sh.set_defaults(func=sh)

def yarn(args, remaining):
    rc = call(run() + ['yarn'] + remaining or [])
    exit(rc)
parser_yarn = subparsers.add_parser('yarn', help='run a yarn command')
parser_yarn.set_defaults(func=yarn)

if len(sys.argv) > 1:
    args, remaining = parser.parse_known_args()
    args.func(args, remaining)
else:
    parser.print_help()
